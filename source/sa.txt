# import os
# import time
# import pygame
# from gtts import gTTS
# import streamlit as st
# import speech_recognition as sr
# from googletrans import LANGUAGES, Translator

# isTranslateOn = False

# translator = Translator() # Initialize the translator module.
# pygame.mixer.init()  # Initialize the mixer module.

# # Create a mapping between language names and language codes
# language_mapping = {name: code for code, name in LANGUAGES.items()}

# def get_language_code(language_name):
#     return language_mapping.get(language_name, language_name)

# def translator_function(spoken_text, from_language, to_language):
#     return translator.translate(spoken_text, src='{}'.format(from_language), dest='{}'.format(to_language))

# def text_to_voice(text_data, to_language):
#     myobj = gTTS(text=text_data, lang='{}'.format(to_language), slow=False)
#     myobj.save("cache_file.mp3")
#     audio = pygame.mixer.Sound("cache_file.mp3")  # Load a sound.
#     audio.play()
#     os.remove("cache_file.mp3")

# def main_process(output_placeholder, from_language, to_language):
    
#     global isTranslateOn
    
#     while isTranslateOn:

#         rec = sr.Recognizer()
#         with sr.Microphone() as source:
#             output_placeholder.text("Listening...")
#             rec.pause_threshold = 1
#             audio = rec.listen(source, phrase_time_limit=10)
        
#         try:
#             output_placeholder.text("Processing...")
#             spoken_text = rec.recognize_google(audio, language='{}'.format(from_language))
            
#             output_placeholder.text("Translating...")
#             translated_text = translator_function(spoken_text, from_language, to_language)

#             text_to_voice(translated_text.text, to_language)
    
#         except Exception as e:
#             print(e)

# # UI layout
# st.title("Language Translator")

# # Dropdowns for selecting languages
# from_language_name = st.selectbox("Select Source Language:", list(LANGUAGES.values()))
# to_language_name = st.selectbox("Select Target Language:", list(LANGUAGES.values()))

# # Convert language names to language codes
# from_language = get_language_code(from_language_name)
# to_language = get_language_code(to_language_name)

# # Button to trigger translation
# start_button = st.button("Start")
# stop_button = st.button("Stop")

# # Check if "Start" button is clicked
# if start_button:
#     if not isTranslateOn:
#         isTranslateOn = True
#         output_placeholder = st.empty()
#         main_process(output_placeholder, from_language, to_language)

# # Check if "Stop" button is clicked
# if stop_button:
#     isTranslateOn = False

# import os
# import time
# import pygame
# from gtts import gTTS
# import streamlit as st
# import speech_recognition as sr
# from googletrans import LANGUAGES, Translator

# # Global flag to manage translation state
# isTranslateOn = False

# # Initialize translator and mixer
# translator = Translator()
# pygame.mixer.init()

# # Map language names to codes
# language_mapping = {name: code for code, name in LANGUAGES.items()}

# def get_language_code(language_name):
#     """Retrieve the language code for a given language name."""
#     return language_mapping.get(language_name, language_name)

# def translator_function(spoken_text, from_language, to_language):
#     """Translate text from one language to another."""
#     try:
#         return translator.translate(spoken_text, src=from_language, dest=to_language)
#     except Exception as e:
#         print(f"Translation Error: {e}")
#         return None

# def text_to_voice(text_data, to_language):
#     """Convert translated text to voice output."""
#     try:
#         myobj = gTTS(text=text_data, lang=to_language, slow=False)
#         myobj.save("cache_file.mp3")
#         pygame.mixer.Sound("cache_file.mp3").play()
#         time.sleep(2)  # Wait for audio playback
#         os.remove("cache_file.mp3")
#     except Exception as e:
#         print(f"Audio Playback Error: {e}")

# def main_process(output_placeholder, from_language, to_language):
#     """Main processing loop for listening, translating, and speaking."""
#     global isTranslateOn
#     rec = sr.Recognizer()

#     while isTranslateOn:
#         with sr.Microphone() as source:
#             output_placeholder.text("Listening...")
#             rec.pause_threshold = 1
#             try:
#                 audio = rec.listen(source, phrase_time_limit=10)
#                 output_placeholder.text("Processing...")
#                 spoken_text = rec.recognize_google(audio, language=from_language)
#                 output_placeholder.text(f"You said: {spoken_text}")

#                 output_placeholder.text("Translating...")
#                 translated_text = translator_function(spoken_text, from_language, to_language)

#                 if translated_text:
#                     output_placeholder.text(f"Translated: {translated_text.text}")
#                     text_to_voice(translated_text.text, to_language)
#             except sr.UnknownValueError:
#                 output_placeholder.text("Could not understand the audio. Please try again.")
#             except Exception as e:
#                 output_placeholder.text(f"Error: {e}")
#                 print(e)

# # Streamlit UI Layout
# st.title("Multilinguistic  Translation System")

# # Dropdowns for language selection
# from_language_name = st.selectbox("Select Source Language:", list(LANGUAGES.values()))
# to_language_name = st.selectbox("Select Target Language:", list(LANGUAGES.values()))

# # Get language codes
# from_language = get_language_code(from_language_name)
# to_language = get_language_code(to_language_name)

# # Buttons to control the translator
# start_button = st.button("Start")
# stop_button = st.button("Stop")

# # Start translation process
# if start_button:
#     if not isTranslateOn:
#         isTranslateOn = True
#         output_placeholder = st.empty()
#         main_process(output_placeholder, from_language, to_language)

# # Stop translation process
# if stop_button:
#     isTranslateOn = False
#     st.write("Translation ended!! Thankyou.")
